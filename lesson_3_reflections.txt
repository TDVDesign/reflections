Q:  When would you want to use a remote repository rather than keeping all your work local?
A:  You would want to use a remote repository for sharing your work with the public, or collaboration with others.  It also works as a cloud backup.

Q:  Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

A:  If Git stays up to date automatically, and you are working on a file, it might try to change the file you are working on.  Rather, when you are ready, you can check for updates.

Q:  Describe the differences between forks, clones and branches.  When would you use one instead of another?

A:  Forks are cloned repositories that come from another GitHub member.  A fork is a clone, which is just a copy of a repository.  Branches are sections of a repository that contain everything 'visible' to the branch.  

A branch would be used when adding a feature or change to a repository.  A fork would be used when cloning another user's work to add to or make changes on.  A clone is used to download a repository from GitHub, or make a local copy on your machine.

Q:  What is the benefit of having a copy of the last known state of the remote stored locally?

A:  The benefit of having a local copy is that you can work offline with the most up to date version you have - for instance if you are working from a sandy beach or a plane flight.

Q:  How would you collaborate without using Git or GitHub?  What would be easier, and what would be harder?

A:  You could collaborate in a number of ways, most fairly simple, like using a shared network drive with revision folders.  The problem is that there is no built-in revision notes or storage of old revisions, so that making mistakes and not being able to undo them is a very real issue.

Q:  When would you want to make changes in a separate branch rather than directly in master?  What benefits does each approach have?

A:  You would want to make changes on a separate branch when the changes should be approved before a merger.  This approach makes it easier to collaborate with others before updating the master branch.